<- KuKeyForConsole

-> {
    KuKey.Core
    KuKey.Models
    Sharprompt
    System
    System.Threading.Tasks
    System.Linq
}

KeyService := $ {
    CreateKey := (Core: DefaultKuKey->>) {
        Name := Prompt.Input str("Please enter the Name") ?? ""
        Account := Prompt.Input str("Please enter the Account") ?? ""
        Password := Prompt.Input str("Please enter the Password") ?? ""
        URL := Prompt.Input str("Please enter the URL") ?? ""
        Note := Prompt.Input str("Please enter the Note") ?? ""
        key := KeyModel { 
            Name = Name
            Account = Account
            Password = Password
            URL = URL
            Note = Note 
        }
        Core.SaveAsync~>{ctx ->> ctx.Create(key)}
    }

    DeleteKey := (Core: DefaultKuKey->> ) {
        want := Prompt.Input str("Please enter the name of the key you want to delete")
        selectedKey := Query~>(want, Core)
        selectedKey >< nil ? {
            Core.SaveAsync~>{ ctx ->>
                ctx.Delete KeyModel(selectedKey.Id)
            }
            print("successfully deleted")
        }
    }

    QueryKey := (Core: DefaultKuKey->> ) {
        want := Prompt.Input str("Please enter the name of the key you want to find")
        selectedKey := Query~>(want, Core)
        selectedKey >< nil ? {
            print("Key: ${selectedKey.Name}\nAccount: ${selectedKey.Account}\nPassword: ${selectedKey.Password}\nURL: ${selectedKey.URL}\nNote: ${selectedKey.Note}")
        }
    }

    UpdateKey := (Core: DefaultKuKey->> ) {
        want := Prompt.Input str("Please enter the name of the key you want to update")
        selectedKey := Query~>(want, Core)
        selectedKey >< nil ? {
            selectedKey.Name = Prompt.Input str("Please enter new Name, if you do not modify this item, press enter") ?? selectedKey.Name
            selectedKey.Account = Prompt.Input str("Please enter new Account, if you do not modify this item, press enter") ?? selectedKey.Account
            selectedKey.Password = Prompt.Input str("Please enter new Password, if you do not modify this item, press enter") ?? selectedKey.Password
            selectedKey.URL = Prompt.Input str("Please enter new URL, if you do not modify this item, press enter") ?? selectedKey.URL
            selectedKey.Note = Prompt.Input str("Please enter new Note, if you do not modify this item, press enter") ?? selectedKey.Note
            Core.SaveAsync~>{ctx ->> ctx.Update(selectedKey)}
        }
    }

    Query := (want: str, Core: DefaultKuKey ->> result: KeyModel) {
        !result: KeyModel = nil
        Core.QueryAsync~>{ i ->> 
            origins := (@ originItem := i.Set KeyModel() ->
            select i.Decrypt(originItem)).ToList()
            items := list KuKey.Models.KeyModel{}
            origins @ item {
                item.b & item.r.Name.ToLower().Contains(want.ToLower()) ? {
                    items += item.r
                }
            }
            len(items) == 0 ? {
                print("NO KEYS")
                <-
            }
            result = Prompt.Select("Please select a key", items, nil, 10 , {i -> i.Name})
        }
        <- result
    }
}



##KeyModel
